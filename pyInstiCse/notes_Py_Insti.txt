"I'm"
""learning""
"""Python"""

0x0F0

(0 x 241) + (15 X 16) + (0 x 1)

0xF20

(15 x 241) + (2 X 16) + (0 x 1)


0x00F
(0 x 256) + (0 X 16) + (15 x 1) = 15

0x0FF
(0 x 256) + (15 X 16) + (15 x 1) = 255

0x0FF + 0x001 = 0x100 = 255 + 1 = 256 

0x100
(1 x 256) + (0 X 16) + (0 x 1) = 256

(0 x {16^2}) + (15 X {16^1}) + (15 x {16^0})






print(12 % 5)
print(12 % 5.0)
print(12.0 % 5.0)
print(12.0 % 5)

print(-12 % 5)
print(12 % -5.0)
print(-12.0 % 5.0)
print(-12.0 % -5)


2
2.0
2.0
2.0

3
-3.0
3.0
-2.0





print(12 % 4.5)
print(-12 % 4.5)
print(12 % -4.5)

3.0
1.5
-1.5

Go back to basics
12/4.5 = 2.666...  <<real answer>>
12//4.5 = 2.0 <<round down>>
-12//4.5 = -3.0 <<round down>>
12//-4.5 = -3.0 <<round down>>

print(12 % 4.5)
(the GOLDEN rule still works: 12 // 4.5 gives 2.0; 2.0 * 4.5 gives 9.0; 12 - 9.0 gives 3.0)

print(-12 % 4.5)
(the GOLDEN rule still works: 12 // 4.5 gives <-3.0>; <-3.0> * 4.5 gives <-13.5>; <-12> - <-13.5> gives 1.5)

print(12 % -4.5)
(the GOLDEN rule still works: 12 // -4.5 gives <-3.0>; <-3.0> * <-4.5> gives <13.5>; 12 - <13.5> gives -1.5)


(2 % -4)

2/4 = 0.5
2//4 = 0
-2/4 = -0.5
-2//4 = -1 
2//-4 = -1 


(the GOLDEN rule still works: 2 // -4 gives <-1>; <-1> * <-4> gives <4>; 2 - <4> gives -2)





print(12 % 4)
print(-12 % 4)
print(12 % -4)

Key takeaways
1. An expression is a combination of values (or variables, operators, calls to functions - you will learn about them soon) which evaluates to a value, e.g., 1 + 2.

2. Operators are special symbols or keywords which are able to operate on the values and perform (mathematical) operations, e.g., the * operator multiplies two values: x * y.

3. Arithmetic operators in Python: + (addition), - (subtraction), * (multiplication), / (classic division - always returns a float), % (modulus - divides left operand by right operand and returns the remainder of the operation, e.g., 5 % 2 = 1), ** (exponentiation - left operand raised to the power of right operand, e.g., 2 ** 3 = 2 * 2 * 2 = 8), // (floor/integer division - returns a number resulting from division, but rounded down to the nearest whole number, e.g., 3 // 2.0 = 1.0)

4. A unary operator is an operator with only one operand, e.g., -1, or +3.

5. A binary operator is an operator with two operands, e.g., 4 + 5, or 12 % 5.

6. Some operators act before others - the hierarchy of priorities:

unary + and - have the highest priority
then: **, then: *, /, and %, and then the lowest priority: binary + and -.
7. Subexpressions in parentheses are always calculated first, e.g., 15 - 1 * (5 * (1 + 2)) = 0.

8. The exponentiation operator uses right-sided binding, e.g., 2 ** 2 ** 3 = 256.

Look at the table below:

Priority	Operator	
1	+, -	unary
2	**	
3	*, /, //, %	
4	+, -	binary


miles_to_kilometers = 1.61 * miles
kilometers_to_miles = 1/1.61 * kilometers

2.4.1.9

Key takeaways

1. A variable is a named location reserved to store values in the memory. A variable is created or initialized automatically when you assign a value to it for the first time. (2.1.4.1)

2. Each variable must have a unique name - an identifier. A legal identifier name must be a non-empty sequence of characters, must begin with the underscore(_), or a letter, and it cannot be a Python keyword. The first character may be followed by underscores, letters, and digits. Identifiers in Python are case-sensitive. (2.1.4.1)

3. Python is a dynamically-typed language, which means you don't need to declare variables in it. (2.1.4.3) To assign values to variables, you can use a simple assignment operator in the form of the equal (=) sign, i.e., var = 1.

4. You can also use compound assignment operators (shortcut operators) to modify values assigned to variables, e.g., var += 1, or var /= 5 * 2. (2.1.4.8)

5. You can assign new values to already existing variables using the assignment operator or one of the compound operators, e.g.: (2.1.4.5)




